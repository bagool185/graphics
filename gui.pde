/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void btnRect_click1(GButton source, GEvent event) { //_CODE_:btnRect:925607:
  selectedMode = Modes.RECT;
} //_CODE_:btnRect:925607:

public void btnEllipse_click1(GButton source, GEvent event) { //_CODE_:btnEllipse:827110:
  selectedMode = Modes.ELLIPSE;
} //_CODE_:btnEllipse:827110:

public void btnMove_click1(GButton source, GEvent event) { //_CODE_:btnMove:366805:
  selectedMode = Modes.MOVE;
} //_CODE_:btnMove:366805:

public void btnResize_click1(GButton source, GEvent event) { //_CODE_:btnResize:670304:
  selectedMode = Modes.RESIZE;
} //_CODE_:btnResize:670304:

public void listFile_click1(GDropList source, GEvent event) { //_CODE_:listFile:757175:
  switch (listFile.getSelectedText()) {
    case "Save":
      fileManager.save();
      println("Clicked save");
      break;
    case "Load .draw file":
      fileManager.loadFile("project");
      break;
      
    case "Load image":
      fileManager.loadFile("image");
      break;
  }
} //_CODE_:listFile:757175:

public void redSlider_change1(GCustomSlider source, GEvent event) { //_CODE_:redSlider:828869:
  canvas.updateCrtColour();
} //_CODE_:redSlider:828869:

public void greenSlider_change1(GCustomSlider source, GEvent event) { //_CODE_:greenSlider:820401:
  canvas.updateCrtColour();
} //_CODE_:greenSlider:820401:

public void blueSlider_change1(GCustomSlider source, GEvent event) { //_CODE_:blueSlider:920409:
 canvas.updateCrtColour();
} //_CODE_:blueSlider:920409:

public void optFillColour_clicked1(GOption source, GEvent event) { //_CODE_:optFillColour:752038:
  canvas.crtColourMode = ColourMode.FILL;
  canvas.updateCrtColour();
} //_CODE_:optFillColour:752038:

public void optLineColour_clicked1(GOption source, GEvent event) { //_CODE_:optLineColour:431447:
  println("optLineColour - GOption >> GEvent." + event + " @ " + millis());
} //_CODE_:optLineColour:431447:

public void btnSelectMode_click1(GButton source, GEvent event) { //_CODE_:btnSelectMode:251861:
  selectedMode = Modes.SELECT;
} //_CODE_:btnSelectMode:251861:

public void btnDeleteShape_click1(GButton source, GEvent event) { //_CODE_:btnDeleteShape:677678:
  canvas.deleteSelectedShape();
} //_CODE_:btnDeleteShape:677678:

public void scaleShape_change1(GSlider source, GEvent event) { //_CODE_:scaleShape:282838:
  if (canvas.selectedShape != null) {
    canvas.selectedShape.scaleBy(source.getValueF());
  }
} //_CODE_:scaleShape:282838:

public void knobRotate_turn1(GKnob source, GEvent event) { //_CODE_:knobRotate:931446:
  selectedMode = Modes.ROTATE;
} //_CODE_:knobRotate:931446:

public void sliderHue_change1(GCustomSlider source, GEvent event) { //_CODE_:sliderHue:323948:
  canvas.hsv.hue = source.getValueF();
  canvas.updateShapeHSV(HSVMode.HUE);
} //_CODE_:sliderHue:323948:

public void sliderSaturation_change1(GCustomSlider source, GEvent event) { //_CODE_:sliderSaturation:817783:
  canvas.hsv.saturation = source.getValueF();
  canvas.updateShapeHSV(HSVMode.SATURATION);
} //_CODE_:sliderSaturation:817783:

public void sliderBrightness_change1(GCustomSlider source, GEvent event) { //_CODE_:sliderBrightness:430139:
  canvas.hsv.value = source.getValueF();
  canvas.updateShapeHSV(HSVMode.BRIGHTNESS);
} //_CODE_:sliderBrightness:430139:

public void btnImageBW_click1(GButton source, GEvent event) { //_CODE_:btnImageBW:880115:
  canvas.imageToBlackWhite();
} //_CODE_:btnImageBW:880115:

public void btnToGrayscale_click1(GButton source, GEvent event) { //_CODE_:btnToGrayscale:850549:
  canvas.imageToGrayscale();
} //_CODE_:btnToGrayscale:850549:

public void btnLine_click1(GButton source, GEvent event) { //_CODE_:btnLine:794585:
  selectedMode = Modes.LINE;
} //_CODE_:btnLine:794585:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  btnRect = new GButton(this, 21, 63, 80, 30);
  btnRect.setText("Rect");
  btnRect.setTextBold();
  btnRect.addEventHandler(this, "btnRect_click1");
  btnEllipse = new GButton(this, 20, 106, 80, 30);
  btnEllipse.setText("Ellipse");
  btnEllipse.setTextBold();
  btnEllipse.addEventHandler(this, "btnEllipse_click1");
  btnMove = new GButton(this, 18, 174, 80, 30);
  btnMove.setText("Move mode");
  btnMove.setTextBold();
  btnMove.addEventHandler(this, "btnMove_click1");
  btnResize = new GButton(this, 17, 215, 80, 30);
  btnResize.setText("Resize mode");
  btnResize.setTextBold();
  btnResize.addEventHandler(this, "btnResize_click1");
  listFile = new GDropList(this, 156, 18, 90, 100, 4, 10);
  listFile.setItems(loadStrings("list_757175"), 0);
  listFile.addEventHandler(this, "listFile_click1");
  canvasView = new GView(this, 150, 169, 958, 913, JAVA2D);
  redSlider = new GCustomSlider(this, 444, 11, 100, 40, "grey_blue");
  redSlider.setShowValue(true);
  redSlider.setShowLimits(true);
  redSlider.setLimits(0, 0, 255);
  redSlider.setNbrTicks(255);
  redSlider.setShowTicks(true);
  redSlider.setNumberFormat(G4P.INTEGER, 0);
  redSlider.setLocalColorScheme(GCScheme.RED_SCHEME);
  redSlider.setOpaque(false);
  redSlider.addEventHandler(this, "redSlider_change1");
  greenSlider = new GCustomSlider(this, 445, 59, 100, 40, "grey_blue");
  greenSlider.setShowValue(true);
  greenSlider.setShowLimits(true);
  greenSlider.setLimits(0, 0, 255);
  greenSlider.setShowTicks(true);
  greenSlider.setNumberFormat(G4P.INTEGER, 0);
  greenSlider.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  greenSlider.setOpaque(false);
  greenSlider.addEventHandler(this, "greenSlider_change1");
  blueSlider = new GCustomSlider(this, 446, 108, 100, 40, "grey_blue");
  blueSlider.setShowValue(true);
  blueSlider.setShowLimits(true);
  blueSlider.setLimits(0, 0, 255);
  blueSlider.setNbrTicks(255);
  blueSlider.setShowTicks(true);
  blueSlider.setNumberFormat(G4P.INTEGER, 0);
  blueSlider.setOpaque(false);
  blueSlider.addEventHandler(this, "blueSlider_change1");
  togGroup1 = new GToggleGroup();
  optFillColour = new GOption(this, 579, 20, 120, 20);
  optFillColour.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  optFillColour.setText("Fill Colour");
  optFillColour.setOpaque(false);
  optFillColour.addEventHandler(this, "optFillColour_clicked1");
  optLineColour = new GOption(this, 579, 47, 120, 20);
  optLineColour.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  optLineColour.setText("Line Colour");
  optLineColour.setOpaque(false);
  optLineColour.addEventHandler(this, "optLineColour_clicked1");
  togGroup1.addControl(optFillColour);
  optFillColour.setSelected(true);
  togGroup1.addControl(optLineColour);
  btnSelectMode = new GButton(this, 18, 259, 80, 30);
  btnSelectMode.setText("Select  mode");
  btnSelectMode.setTextBold();
  btnSelectMode.addEventHandler(this, "btnSelectMode_click1");
  btnDeleteShape = new GButton(this, 19, 319, 80, 48);
  btnDeleteShape.setText("Delete selected shape");
  btnDeleteShape.setTextBold();
  btnDeleteShape.setLocalColorScheme(GCScheme.RED_SCHEME);
  btnDeleteShape.addEventHandler(this, "btnDeleteShape_click1");
  scaleShape = new GSlider(this, 13, 441, 100, 40, 10.0);
  scaleShape.setLimits(1.0, 0.0, 3.0);
  scaleShape.setNumberFormat(G4P.DECIMAL, 2);
  scaleShape.setOpaque(false);
  scaleShape.addEventHandler(this, "scaleShape_change1");
  lblScale = new GLabel(this, 23, 389, 80, 41);
  lblScale.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblScale.setText("Scale selected shape");
  lblScale.setTextBold();
  lblScale.setOpaque(false);
  knobRotate = new GKnob(this, 31, 573, 60, 60, 0.8);
  knobRotate.setTurnRange(90, 90);
  knobRotate.setTurnMode(GKnob.CTRL_HORIZONTAL);
  knobRotate.setSensitivity(1);
  knobRotate.setShowArcOnly(false);
  knobRotate.setOverArcOnly(false);
  knobRotate.setIncludeOverBezel(false);
  knobRotate.setShowTrack(true);
  knobRotate.setLimits(0.0, 0.0, 360.0);
  knobRotate.setShowTicks(true);
  knobRotate.setOpaque(false);
  knobRotate.addEventHandler(this, "knobRotate_turn1");
  lblRotateShape = new GLabel(this, 24, 509, 77, 48);
  lblRotateShape.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblRotateShape.setText("Rotate selected shape");
  lblRotateShape.setTextBold();
  lblRotateShape.setOpaque(false);
  sliderHue = new GCustomSlider(this, 872, 5, 100, 40, "grey_blue");
  sliderHue.setShowValue(true);
  sliderHue.setShowLimits(true);
  sliderHue.setLimits(0.0, 0.0, 180.0);
  sliderHue.setShowTicks(true);
  sliderHue.setNumberFormat(G4P.DECIMAL, 2);
  sliderHue.setOpaque(false);
  sliderHue.addEventHandler(this, "sliderHue_change1");
  sliderSaturation = new GCustomSlider(this, 873, 54, 100, 40, "grey_blue");
  sliderSaturation.setShowValue(true);
  sliderSaturation.setShowLimits(true);
  sliderSaturation.setLimits(0.0, -50.0, 50.0);
  sliderSaturation.setShowTicks(true);
  sliderSaturation.setNumberFormat(G4P.DECIMAL, 2);
  sliderSaturation.setOpaque(false);
  sliderSaturation.addEventHandler(this, "sliderSaturation_change1");
  sliderBrightness = new GCustomSlider(this, 873, 101, 100, 40, "grey_blue");
  sliderBrightness.setShowValue(true);
  sliderBrightness.setShowLimits(true);
  sliderBrightness.setLimits(0.0, -0.0, 100.0);
  sliderBrightness.setShowTicks(true);
  sliderBrightness.setNumberFormat(G4P.DECIMAL, 2);
  sliderBrightness.setOpaque(true);
  sliderBrightness.addEventHandler(this, "sliderBrightness_change1");
  lblRed = new GLabel(this, 350, 19, 80, 20);
  lblRed.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblRed.setText("Red");
  lblRed.setTextBold();
  lblRed.setOpaque(false);
  lblGreen = new GLabel(this, 350, 68, 80, 20);
  lblGreen.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblGreen.setText("Green");
  lblGreen.setTextBold();
  lblGreen.setOpaque(false);
  lblBlue = new GLabel(this, 349, 117, 80, 20);
  lblBlue.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblBlue.setText("Blue");
  lblBlue.setTextBold();
  lblBlue.setOpaque(false);
  lblHue = new GLabel(this, 772, 19, 80, 20);
  lblHue.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblHue.setText("Hue");
  lblHue.setTextBold();
  lblHue.setOpaque(false);
  lblSaturation = new GLabel(this, 774, 61, 80, 20);
  lblSaturation.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblSaturation.setText("Saturation");
  lblSaturation.setTextBold();
  lblSaturation.setOpaque(false);
  lblBrightness = new GLabel(this, 775, 106, 80, 20);
  lblBrightness.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblBrightness.setText("Brightness");
  lblBrightness.setTextBold();
  lblBrightness.setOpaque(false);
  btnImageBW = new GButton(this, 20, 658, 80, 53);
  btnImageBW.setText("Image to Black & White");
  btnImageBW.setTextBold();
  btnImageBW.setLocalColorScheme(GCScheme.YELLOW_SCHEME);
  btnImageBW.addEventHandler(this, "btnImageBW_click1");
  btnToGrayscale = new GButton(this, 19, 739, 80, 30);
  btnToGrayscale.setText("Image to Grayscale");
  btnToGrayscale.setTextBold();
  btnToGrayscale.setLocalColorScheme(GCScheme.YELLOW_SCHEME);
  btnToGrayscale.addEventHandler(this, "btnToGrayscale_click1");
  btnLine = new GButton(this, 20, 22, 80, 30);
  btnLine.setText("Line");
  btnLine.setTextBold();
  btnLine.addEventHandler(this, "btnLine_click1");
}

// Variable declarations 
// autogenerated do not edit
GButton btnRect; 
GButton btnEllipse; 
GButton btnMove; 
GButton btnResize; 
GDropList listFile; 
GView canvasView; 
GCustomSlider redSlider; 
GCustomSlider greenSlider; 
GCustomSlider blueSlider; 
GToggleGroup togGroup1; 
GOption optFillColour; 
GOption optLineColour; 
GButton btnSelectMode; 
GButton btnDeleteShape; 
GSlider scaleShape; 
GLabel lblScale; 
GKnob knobRotate; 
GLabel lblRotateShape; 
GCustomSlider sliderHue; 
GCustomSlider sliderSaturation; 
GCustomSlider sliderBrightness; 
GLabel lblRed; 
GLabel lblGreen; 
GLabel lblBlue; 
GLabel lblHue; 
GLabel lblSaturation; 
GLabel lblBrightness; 
GButton btnImageBW; 
GButton btnToGrayscale; 
GButton btnLine; 